#!/usr/bin/env python

import os
import requests
import time

# This script works as-is for public repos.
# If your repository is private, then you'll need to generate a "Personal API Token"
# from https://github.com/settings/tokens/new , including at least the "repo" permission
# ("Full control of private repositories"), and store it in GITHUB_API_TOKEN below.
# Do not publish this API token! Do not push it to GitHub!

GITHUB_REPOSITORY_NAME = 'llvm/llvm-project'
GITHUB_API_TOKEN = os.environ.get('GITHUB_API_TOKEN', None)


gh_resolution_map = {
    "CONFIRMED": [
        1298, 1393, 2353, 2512, 2623, 2877, 2959, 2960, 2978, 3005, 3018, 3022, 3035, 3067, 3068, 3077, 3136, 3186, 3192, 3206,
        3245, 3251, 3254, 3278, 3355, 3470, 3527, 3559, 3680, 3842, 4009, 4051, 4097, 4243, 4263, 4292, 4440, 4455, 4620, 4633,
        4684, 4757, 4891, 5055, 5351, 5513, 5546, 5746, 6151, 6152, 6304, 6348, 6383, 7173, 7181, 8243, 8245, 8476, 8605, 9661,
        9704, 9802, 9803, 9804, 9805, 9837, 10008, 10246, 10302, 10870, 10984, 11287, 11288, 11338, 11569, 11689, 11760, 11877, 12559, 12696,
        13011, 13202, 13357, 13393, 13451, 13638, 13913, 14025, 14087, 14179, 14247, 14402, 14453, 14485, 14707, 14801, 15562, 16102, 16567, 17438,
        17503, 17538, 17564, 17641, 17830, 18156, 18188, 18316, 18325, 18701, 18781, 18829, 18968, 19202, 19364, 19430, 19450, 19499, 19502, 19563,
        19702, 19985, 20061, 20082, 20227, 20238, 20344, 20594, 20771, 20888, 20970, 21044, 21139, 21147, 21193, 21205, 21232, 21245, 21259, 21320,
        21347, 21390, 21426, 21508, 21603, 21657, 21744, 21794, 21904, 22001, 22008, 22016, 22200, 22269, 22324, 22349, 22357, 22381, 22440, 22490,
        22551, 22554, 22560, 22595, 22613, 22759, 22993, 23008, 23031, 23136, 23175, 23213, 23254, 23256, 23260, 23301, 23464, 23543, 23548, 23691,
        23715, 23758, 23790, 23879, 24002, 24066, 24102, 24109, 24231, 24460, 24714, 24721, 24798, 24825, 24848, 24978, 24990, 25013, 25066, 25135,
        25191, 25458, 25506, 25539, 25550, 25703, 25726, 25752, 25810, 26001, 26059, 26079, 26110, 26113, 26210, 26262, 26298, 26429, 26451, 26457,
        26466, 26590, 26608, 26620, 26754, 26758, 26774, 27008, 27036, 27140, 27319, 27408, 27416, 27467, 27579, 27673, 27727, 27778, 27799, 27812,
        27832, 27947, 28032, 28037, 28106, 28220, 28321, 28366, 28396, 28406, 28466, 28521, 28659, 28824, 28845, 28874, 28901, 28940, 28975, 29054,
        29115, 29179, 29279, 29582, 29647, 29683, 29739, 29740, 29774, 29864, 29920, 29949, 30010, 30012, 30017, 30049, 30077, 30135, 30165, 30246,
        30380, 30390, 30432, 30479, 30503, 30509, 30616, 30713, 30740, 30892, 30920, 30960, 31025, 31140, 31148, 31155, 31206, 31272, 31288, 31434,
        31488, 31507, 31513, 31514, 31556, 31641, 31775, 31782, 31789, 31813, 31956, 32149, 32203, 32472, 32605, 32644, 32833, 32836, 32841, 32863,
        32894, 32941, 32989, 33002, 33078, 33114, 33155, 33262, 33335, 33349, 33352, 33521, 33749, 33783, 33836, 33957, 33995, 34101, 34108, 34117,
        34163, 34241, 34245, 34292, 34434, 34551, 34597, 34626, 34652, 34698, 34732, 34818, 34935, 34943, 34950, 35005, 35183, 35338, 35349, 35394,
        35448, 35485, 35591, 35634, 35777, 35819, 35826, 35829, 35840, 35960, 36179, 36200, 36228, 36233, 36261, 36264, 36326, 36362, 36484, 36535,
        36638, 36880, 36906, 36947, 36985, 37358, 37362, 37553, 37662, 37689, 37736, 37757, 37797, 37819, 37846, 37947, 38040, 38080, 38180, 38242,
        38328, 38345, 38410, 38500, 38523, 38554, 38556, 38584, 38587, 38605, 38659, 38674, 38738, 38744, 38778, 38795, 38796, 38837, 38846, 38847,
        38947, 38981, 38982, 39002, 39004, 39006, 39038, 39064, 39068, 39102, 39107, 39134, 39135, 39201, 39203, 39205, 39213, 39228, 39238, 39249,
        39253, 39286, 39290, 39319, 39321, 39371, 39383, 39387, 39391, 39435, 39439, 39454, 39492, 39521, 39535, 39547, 39573, 39582, 39634, 39689,
        39694, 39724, 39742, 39764, 39804, 39830, 39898, 39926, 39944, 39945, 39959, 39982, 39998, 40047, 40064, 40137, 40161, 40162, 40170, 40182,
        40258, 40321, 40363, 40370, 40427, 40431, 40449, 40460, 40464, 40468, 40504, 40514, 40572, 40629, 40665, 40669, 40797, 40825, 40827, 40879,
        40885, 40904, 40906, 40920, 41032, 41097, 41111, 41128, 41154, 41267, 41302, 41359, 41373, 41394, 41398, 41422, 41493, 41566, 41571, 41588,
        41597, 41599, 41608, 41620, 41649, 41667, 41710, 41743, 41751, 41760, 41776, 41778, 41821, 41825, 41853, 41884, 41918, 41936, 41939, 41946,
        41971, 42000, 42055, 42079, 42103, 42125, 42129, 42156, 42161, 42196, 42260, 42265, 42270, 42283, 42300, 42320, 42347, 42387, 42398, 42421,
        42425, 42431, 42441, 42465, 42480, 42489, 42496, 42547, 42566, 42608, 42609, 42619, 42649, 42652, 42709, 42727, 42804, 42851, 42862, 42943,
        43018, 43027, 43038, 43047, 43083, 43085, 43113, 43115, 43127, 43133, 43156, 43199, 43251, 43265, 43294, 43300, 43310, 43315, 43325, 43381,
        43398, 43408, 43459, 43468, 43500, 43549, 43551, 43552, 43586, 43596, 43604, 43608, 43612, 43697, 43719, 43745, 43800, 43824, 43828, 43837,
        43882, 43961, 43981, 43996, 44093, 44095, 44120, 44181, 44188, 44216, 44263, 44292, 44296, 44308, 44366, 44456, 44465, 44466, 44479, 44481,
        44486, 44488, 44490, 44493, 44498, 44543, 44579, 44587, 44625, 44637, 44653, 44676, 44698, 44817, 44820, 44843, 44852, 44869, 44877, 44896,
        44899, 44900, 44916, 44940, 44944, 44999, 45012, 45021, 45023, 45080, 45084, 45085, 45111, 45131, 45166, 45182, 45190, 45191, 45195, 45214,
        45224, 45228, 45247, 45260, 45265, 45279, 45307, 45309, 45316, 45337, 45339, 45354, 45361, 45371, 45419, 45432, 45444, 45449, 45485, 45512,
        45535, 45541, 45544, 45560, 45561, 45588, 45691, 45721, 45736, 45739, 45755, 45770, 45771, 45773, 45791, 45808, 45852, 45874, 45899, 45900,
        45902, 45911, 46029, 46037, 46056, 46197, 46291, 46335, 46346, 46360, 46383, 46398, 46437, 46457, 46460, 46546, 46548, 46583, 46587, 46601,
        46617, 46689, 46702, 46713, 46730, 46739, 46755, 46763, 46793, 46805, 46818, 46841, 46858, 46866, 46868, 46871, 46875, 46892, 46903, 47066,
        47071, 47096, 47130, 47136, 47180, 47189, 47221, 47270, 47284, 47370, 47371, 47376, 47411, 47425, 47448, 47460, 47465, 47488, 47489, 47517,
        47570, 47594, 47643, 47652, 47655, 47674, 47700, 47702, 47741, 47754, 47818, 47819, 47826, 47833, 47860, 47869, 47878, 47879, 47881, 47883,
        47885, 47902, 47920, 47932, 47997, 48003, 48015, 48040, 48045, 48073, 48074, 48083, 48089, 48115, 48138, 48141, 48183, 48207, 48230, 48312,
        48319, 48356, 48362, 48420, 48425, 48428, 48445, 48487, 48656, 48665, 48668, 48688, 48786, 48864, 48888, 48890, 48908, 48924, 48929, 48939,
        48962, 48970, 48971, 48977, 49015, 49020, 49063, 49066, 49071, 49079, 49081, 49093, 49100, 49103, 49109, 49111, 49113, 49136, 49152, 49160,
        49178, 49186, 49197, 49204, 49221, 49277, 49284, 49292, 49304, 49317, 49319, 49322, 49330, 49339, 49349, 49352, 49396, 49416, 49501, 49506,
        49536, 49616, 49630, 49660, 49673, 49689, 49691, 49703, 49705, 49794, 49839, 49857, 49876, 49888, 49895, 49957, 50055, 50080, 50083, 50094,
        50098, 50115, 50140, 50142, 50147, 50151, 50158, 50167, 50185, 50275, 50350, 50376, 50380, 50387, 50437, 50459, 50494, 50502, 50525, 50623,
        50662, 50793, 50827, 50831, 50845, 50854, 50869, 50879, 50901, 50932, 51051, 51052, 51098, 51130, 51160, 51174, 51221, 51223, 51234, 51261,
        51269, 51277, 51347, 51355, 51389, 51414, 51451, 51454, 51461, 51462, 51511, 51565, 51566, 51570, 51571, 51593, 51594, 51617, 51623, 51631,
        51641, 51650, 51695, 51734, 51744, 51764, 51808, 51810, 51859, 51869, 51894, 51895, 51903, 51937,
    ],
}


if __name__ == '__main__':
    start_time = time.time()
    page = 0
    retrieved = 0
    open_issues = []
    while True:
        headers = {
            'User-Agent': 'Script from https://github.com/Quuxplusone/BugzillaToGithub',
        }
        if GITHUB_API_TOKEN is not None:
            headers['Authorization'] = 'token %s' % GITHUB_API_TOKEN
        r = requests.get(
            'https://api.github.com/repos/%s/issues?state=open&page=%d&per_page=100' % (GITHUB_REPOSITORY_NAME, page + 1),
            headers=headers,
        )
        bugs = r.json()
        if type(bugs) is not list:
            print('bugs = %r' % bugs)
            assert type(bugs) is list, 'ERROR -- JSON is unexpectedly not a list on page %d' % page
        if len(bugs) == 0:
            break
        # Filter out pull requests; we care only about issues, not pull requests.
        issues = [b for b in bugs if 'pull_request' not in b]
        for issue in issues:
            if 'number' not in issue:
                print('WARNING -- bug without number on page %d!!' % page)
            else:
                id = issue['number']
                open_issues.append(int(id))
        page += 1
        retrieved += len(bugs)
        elapsed = time.time() - start_time
        print('Retrieved %d pages containing %d bugs in %.2fs; ???s remaining' % (page, retrieved, elapsed))

    issues_to_mark_confirmed = sorted(set(gh_resolution_map['CONFIRMED']) & set(open_issues))
    print('issues_to_mark_confirmed = [', end='')
    for i, gh_id in enumerate(issues_to_mark_confirmed):
        if i % 20 == 0:
            print('\n   ', end='')
        print(' %d,' % int(gh_id), end='')
    print('\n]')
